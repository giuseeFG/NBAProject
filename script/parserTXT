var http = require('http'),
    fs = require('fs'),
    url = require('url'),
    MongoClient = require('mongodb').MongoClient,
    LineByLineReader = require('line-by-line'),
    //C:/Users/Giuseppe/Desktop/basketProjectBD/basketProjectBD/datasetNBA/2011_2012.txt
    //  /Volumes/MacbookHD/Documenti/MYSTUFF/RM3/2nd/BigData/dataset/datasetNBA/NBADATASET.txt
    lrPlayers = new LineByLineReader('C:/Users/Giuseppe/Desktop/basketProjectBD/basketProjectBD/datasetNBA/players20062007 PO.txt');

lrPlayers.on('error', function(err) {
    // 'err' contains error object
});

var players = [];
lrPlayers.on('line', function(line) {
    var row = line.split('\t');
    var player = {};
    player.name = row[1];
    player.trueName = row[2];
    player.team = row[4];
    players.push(player);
});



lrPlayers.on('end', function() {
    console.log("finish all players");
    parse(players);
});



var out = fs.createWriteStream("C:/Users/Giuseppe/Desktop/basketProjectBD/basketProjectBD/datasetNBA/DATASET_CLEANED/2006-2007 PO.txt");            
function parse(players) {
    lr = new LineByLineReader('C:/Users/Giuseppe/Desktop/basketProjectBD/basketProjectBD/datasetNBA/2006-2007 PO.txt');

    lr.on('error', function(err) {
        // 'err' contains error object
    });

    lr.on('line', function(line) {
        var splitted = line.split("\t");
        var eventDetail = splitted[3];
        try {
            var res = eventDetail.split("] ");
            var team = res[0].substring(1, 4);
            var tmp = res[1].split(" ");
            var name = '';
            if (tmp[0].indexOf(".") !== -1) {
                name = tmp[0] + tmp[1];
                
            } else {
                name = tmp[0];
            }
            
            for (player in players) {
                if ((name === players[player].name) && (team === players[player].team)) {
                    var lineNew = line.replace(name, players[player].trueName.replace(" ",""));
                    console.log("yeah");
                    try {
                       out.write(lineNew + '\n');
                    }
                    catch(err) {console.log("ERRRRRRRRRRRRRRRRRoooore")}
                }
            }
        } catch (err) {
            console.log("ERRORE " + err + " AT " + line);
        }
    });

    lr.on('end', function() {
        // saving into MongoDB the last match read.
        //collection.insert(match);
        console.log("finish all");
    });
}